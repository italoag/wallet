package dev.bloco.wallet.hub.infra.provider.mapper;

import dev.bloco.wallet.hub.domain.model.Wallet;
import dev.bloco.wallet.hub.infra.provider.data.entity.WalletEntity;
import org.mapstruct.Mapper;
import org.mapstruct.Mapping;
import org.mapstruct.Mappings;

/**
 * Mapper interface for converting between {@link Wallet} domain objects and
 * {@link WalletEntity} database entities, and vice versa.
 *<p/>
 * This mapper is responsible for mapping the fields of the Wallet and WalletEntity classes,
 * ensuring consistency and simplifying the transformation process between the domain
 * and persistence layers.
 *<p/>
 * The mapping is bidirectional, allowing:
 * - Conversion from a {@link WalletEntity} to a {@link Wallet} domain object.
 * - Conversion from a {@link Wallet} domain object to a {@link WalletEntity}.
 *<p/>
 * The implementation of this interface is generated by the MapStruct framework,
 * reducing manual boilerplate code and improving maintainability.
 *<p/>
 * Notes:
 * - Explicit mappings are defined for each field to ensure accurate and consistent data conversion.
 * - The mapper is configured to integrate with Spring's dependency injection framework
 *   using `componentModel = "spring"`.
 *<p/>
 * Use this interface in services or repositories to handle the conversion
 * of Wallet objects between the domain and persistence layers.
 */
@Mapper(componentModel = "spring")
public interface WalletMapper {

    default Wallet toDomain(WalletEntity entity) {
        if (entity == null) return null;
        Wallet wallet = new Wallet(entity.getId(), "Wallet", "");
        wallet.setBalance(entity.getBalance());
        return wallet;
    }

    default WalletEntity toEntity(Wallet domain) {
        if (domain == null) return null;
        WalletEntity entity = new WalletEntity();
        entity.setId(domain.getId());
        // No userId in domain model; use id as placeholder to satisfy non-null constraint
        entity.setUserId(domain.getId());
        entity.setBalance(domain.getBalance());
        return entity;
    }
}
