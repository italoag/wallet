package dev.bloco.wallet.hub.infra.provider.mapper;

import dev.bloco.wallet.hub.domain.User;

import dev.bloco.wallet.hub.infra.provider.data.entity.UserEntity;
import org.mapstruct.Mapper;
import org.mapstruct.Mapping;
import org.mapstruct.Mappings;

/**
 * Mapper interface for converting between {@link User} domain objects and
 * {@link UserEntity} database entities, and vice versa.
 *<p/>
 * This mapper is responsible for mapping the fields of the User and UserEntity classes,
 * ensuring consistency and simplifying the transformation process between the domain
 * and persistence layers.
 *<p/>
 * The mapping is bidirectional, allowing:
 * - Conversion from a {@link UserEntity} to a {@link User} domain object.
 * - Conversion from a {@link User} domain object to a {@link UserEntity}.
 *<p/>
 * The implementation of this interface is generated by the MapStruct framework,
 * reducing manual boilerplate code and improving maintainability.
 *<p/>
 * Notes:
 * - Explicit mappings are defined for each field to ensure accurate and consistent data conversion.
 * - The mapper is configured to integrate with Spring's dependency injection framework
 *   using `componentModel = "spring"`.
 *<p/>
 * Use this interface in services or repositories to handle the conversion
 * of User objects between the domain and persistence layers.
 */
@Mapper(componentModel = "spring")
public interface UserMapper {

    @Mappings({
            @Mapping(target = "id", source = "id"),
            @Mapping(target = "name", source = "name"),
            @Mapping(target = "email", source = "email")
    })
    User toDomain(UserEntity entity);

    @Mappings({
            @Mapping(target = "id", source = "id"),
            @Mapping(target = "name", source = "name"),
            @Mapping(target = "email", source = "email")
    })
    UserEntity toEntity(User domain);
}
